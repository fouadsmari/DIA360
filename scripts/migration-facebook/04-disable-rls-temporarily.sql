-- =====================================
-- 04 - D√âSACTIVATION TEMPORAIRE RLS  
-- =====================================
-- Ce script d√©sactive temporairement RLS pour permettre la migration
-- IMPACT : CRITIQUE - S√©curit√© temporairement d√©sactiv√©e
-- DUR√âE : 30 secondes
-- ‚ö†Ô∏è ATTENTION: Ex√©cution pendant fen√™tre de maintenance uniquement

\echo 'üö® D√âBUT D√âSACTIVATION TEMPORAIRE RLS...'
\echo '‚ö†Ô∏è  ATTENTION: S√©curit√© RLS temporairement d√©sactiv√©e pour migration'

-- 0. V√âRIFICATIONS PR√âALABLES
DO $$
BEGIN
  -- V√©rifier qu'on est en p√©riode de maintenance
  IF EXTRACT(DOW FROM NOW()) NOT IN (0, 6) AND EXTRACT(HOUR FROM NOW()) BETWEEN 6 AND 22 THEN
    RAISE WARNING 'ATTENTION: Ex√©cution en heures ouvrables d√©tect√©e';
    RAISE NOTICE 'Recommandation: Ex√©cuter en heures creuses (soir/week-end)';
  END IF;
  
  -- V√©rifier backup r√©cent
  IF NOT EXISTS (
    SELECT 1 FROM migration_log 
    WHERE phase = 'preparation' 
    AND status = 'completed' 
    AND start_time > NOW() - INTERVAL '24 hours'
  ) THEN
    RAISE EXCEPTION 'ERREUR: Pas de pr√©paration r√©cente d√©tect√©e. Ex√©cuter 03-prepare-migration.sql d''abord';
  END IF;
END $$;

-- 1. ENREGISTRER D√âBUT PHASE 2
INSERT INTO migration_log (phase, script_name, status, notes)
VALUES ('phase2_urgent', '04-disable-rls-temporarily.sql', 'started', 'D√âBUT PHASE 2 - D√©sactivation RLS temporaire');

-- 2. SAUVEGARDER √âTAT ACTUEL RLS
\echo 'üíæ 1. Sauvegarde √©tat actuel RLS:'

-- Cr√©er table temporaire pour sauvegarder l'√©tat RLS
CREATE TEMP TABLE rls_state_backup AS
SELECT 
  schemaname,
  tablename,
  rowsecurity
FROM pg_tables 
WHERE tablename LIKE 'facebook_%'
  AND schemaname = 'public';

-- Sauvegarder dans la table permanente aussi
INSERT INTO migration_backup_info (table_name, column_name, old_definition, notes)
SELECT 
  'rls_state',
  tablename,
  CASE WHEN rowsecurity THEN 'ENABLED' ELSE 'DISABLED' END,
  '√âtat RLS avant migration'
FROM pg_tables 
WHERE tablename LIKE 'facebook_%' 
  AND schemaname = 'public';

-- Afficher √©tat actuel
SELECT 
  tablename as "Table",
  CASE WHEN rowsecurity THEN 'üîí Activ√©' ELSE 'üîì D√©sactiv√©' END as "√âtat RLS"
FROM pg_tables 
WHERE tablename LIKE 'facebook_%' 
  AND schemaname = 'public'
ORDER BY tablename;

-- 3. V√âRIFIER CONNEXIONS ACTIVES
\echo 'üîç 2. V√©rification connexions actives:'

SELECT 
  COUNT(*) as "Connexions totales",
  COUNT(*) FILTER (WHERE state = 'active') as "Requ√™tes actives",
  COUNT(*) FILTER (WHERE query ILIKE '%facebook_%') as "Requ√™tes Facebook actives"
FROM pg_stat_activity 
WHERE datname = current_database();

-- Afficher requ√™tes actives sur tables Facebook si il y en a
DO $$
DECLARE
  active_queries INTEGER;
BEGIN
  SELECT COUNT(*) INTO active_queries
  FROM pg_stat_activity 
  WHERE state = 'active' 
    AND query ILIKE '%facebook_%'
    AND pid != pg_backend_pid();
    
  IF active_queries > 0 THEN
    RAISE WARNING 'ATTENTION: % requ√™tes actives d√©tect√©es sur tables Facebook', active_queries;
    
    -- Afficher les requ√™tes actives
    RAISE NOTICE 'Requ√™tes actives:';
    FOR rec IN 
      SELECT pid, query_start, left(query, 100) as query_snippet
      FROM pg_stat_activity 
      WHERE state = 'active' 
        AND query ILIKE '%facebook_%'
        AND pid != pg_backend_pid()
    LOOP
      RAISE NOTICE 'PID %, depuis %, requ√™te: %', rec.pid, rec.query_start, rec.query_snippet;
    END LOOP;
    
    RAISE NOTICE 'Consid√©rer attendre la fin de ces requ√™tes avant de continuer';
  ELSE
    RAISE NOTICE '‚úÖ Aucune requ√™te active sur tables Facebook';
  END IF;
END $$;

-- 4. D√âSACTIVATION RLS TEMPORAIRE
\echo 'üîì 3. D√©sactivation RLS temporaire:'

-- D√©sactiver RLS sur facebook_ads_data
\echo '  - facebook_ads_data...'
ALTER TABLE public.facebook_ads_data DISABLE ROW LEVEL SECURITY;

-- D√©sactiver RLS sur facebook_sync_status  
\echo '  - facebook_sync_status...'
ALTER TABLE public.facebook_sync_status DISABLE ROW LEVEL SECURITY;

-- D√©sactiver RLS sur facebook_import_logs
\echo '  - facebook_import_logs...'
ALTER TABLE public.facebook_import_logs DISABLE ROW LEVEL SECURITY;

-- D√©sactiver RLS sur facebook_api_logs si elle existe
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'facebook_api_logs') THEN
    EXECUTE 'ALTER TABLE public.facebook_api_logs DISABLE ROW LEVEL SECURITY';
    RAISE NOTICE '  - facebook_api_logs...';
  END IF;
END $$;

-- D√©sactiver RLS sur facebook_logs_config si elle existe  
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'facebook_logs_config') THEN
    EXECUTE 'ALTER TABLE public.facebook_logs_config DISABLE ROW LEVEL SECURITY';
    RAISE NOTICE '  - facebook_logs_config...';
  END IF;
END $$;

-- 5. V√âRIFICATION D√âSACTIVATION
\echo '‚úÖ 4. V√©rification d√©sactivation:'

SELECT 
  tablename as "Table",
  CASE WHEN rowsecurity THEN '‚ùå Encore activ√©' ELSE '‚úÖ D√©sactiv√©' END as "√âtat RLS",
  CASE WHEN rowsecurity THEN 'üö® PROBL√àME' ELSE '‚úÖ OK' END as "Statut"
FROM pg_tables 
WHERE tablename LIKE 'facebook_%' 
  AND schemaname = 'public'
ORDER BY tablename;

-- 6. V√âRIFICATION ACC√àS TOTAL
\echo 'üîç 5. Test acc√®s total (doit fonctionner):'

-- Test lecture sans restriction
DO $$
DECLARE
  test_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO test_count FROM facebook_ads_data;
  RAISE NOTICE 'Test lecture facebook_ads_data: % enregistrements accessibles', test_count;
  
  SELECT COUNT(*) INTO test_count FROM facebook_sync_status;  
  RAISE NOTICE 'Test lecture facebook_sync_status: % enregistrements accessibles', test_count;
  
  SELECT COUNT(*) INTO test_count FROM facebook_import_logs;
  RAISE NOTICE 'Test lecture facebook_import_logs: % enregistrements accessibles', test_count;
  
  RAISE NOTICE '‚úÖ Acc√®s total confirm√© - RLS d√©sactiv√© avec succ√®s';
END $$;

-- 7. AVERTISSEMENTS S√âCURIT√â
\echo ''
\echo 'üö® AVERTISSEMENTS S√âCURIT√â:'
\echo '  ‚ùó RLS D√âSACTIV√â sur toutes les tables Facebook'
\echo '  ‚ùó Toutes les donn√©es sont maintenant accessibles sans restriction'
\echo '  ‚ùó EX√âCUTER LES SCRIPTS SUIVANTS RAPIDEMENT'
\echo '  ‚ùó NE PAS laisser RLS d√©sactiv√© plus de 4 heures'
\echo ''

-- 8. TIMER DE S√âCURIT√â
\echo '‚è∞ Timer de s√©curit√© activ√©:'

-- Cr√©er notification pour r√©activer RLS automatiquement
DO $$
BEGIN
  -- Programmer rappel dans 2 heures
  RAISE NOTICE 'RAPPEL: RLS sera √† r√©activer dans maximum 2 heures';
  RAISE NOTICE 'Timestamp d√©sactivation: %', NOW();
  RAISE NOTICE 'R√©activation recommand√©e avant: %', NOW() + INTERVAL '2 hours';
END $$;

-- 9. FINALISATION
UPDATE migration_log 
SET 
  status = 'completed',
  end_time = NOW(),
  duration_seconds = EXTRACT(EPOCH FROM (NOW() - start_time)),
  notes = 'RLS d√©sactiv√© temporairement - R√âACTIVER RAPIDEMENT'
WHERE phase = 'phase2_urgent' 
  AND script_name = '04-disable-rls-temporarily.sql' 
  AND status = 'started';

\echo '‚úÖ RLS TEMPORAIREMENT D√âSACTIV√â'
\echo ''
\echo 'üìã PROCHAINES √âTAPES IMM√âDIATES:'
\echo '  1. Ex√©cuter IMM√âDIATEMENT 05-add-missing-columns.sql'
\echo '  2. Puis 06-fix-rls-policies.sql'  
\echo '  3. Puis 07-enable-rls-secure.sql'
\echo '  4. Temps maximum total: 2 heures'
\echo ''
\echo 'üö® CRITIQUE: Ne pas arr√™ter la migration maintenant!'
\echo 'üö® RLS doit √™tre r√©activ√© rapidement pour la s√©curit√©!'