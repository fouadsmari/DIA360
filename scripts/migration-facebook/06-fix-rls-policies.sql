-- =====================================
-- 06 - CORRECTION POLITIQUES RLS
-- =====================================
-- Ce script corrige les politiques RLS selon FACEBOOK.md (architecture unifi√©e)
-- IMPACT : CRITIQUE - Correction failles de s√©curit√©
-- DUR√âE : 2-3 minutes
-- ‚ö†Ô∏è PR√âREQUIS: RLS d√©sactiv√© + colonnes ajout√©es

\echo 'üîí D√âBUT CORRECTION POLITIQUES RLS...'

-- 0. V√âRIFICATIONS PR√âALABLES
DO $$
BEGIN
  -- V√©rifier que RLS est toujours d√©sactiv√©
  IF EXISTS (
    SELECT 1 FROM pg_tables 
    WHERE tablename LIKE 'facebook_%' 
    AND rowsecurity = true
  ) THEN
    RAISE EXCEPTION 'ERREUR: RLS r√©activ√© pr√©matur√©ment. Maintenir d√©sactiv√© pendant correction';
  END IF;
  
  -- V√©rifier phase pr√©c√©dente
  IF NOT EXISTS (
    SELECT 1 FROM migration_log 
    WHERE phase = 'phase2_urgent' 
    AND script_name = '05-add-missing-columns.sql'
    AND status = 'completed'
  ) THEN
    RAISE EXCEPTION 'ERREUR: Ajout colonnes non termin√©';
  END IF;
END $$;

-- 1. ENREGISTRER D√âBUT
INSERT INTO migration_log (phase, script_name, status, notes)
VALUES ('phase2_urgent', '06-fix-rls-policies.sql', 'started', 'Correction politiques RLS s√©curis√©es');

-- 2. SAUVEGARDE POLITIQUES ACTUELLES
\echo 'üíæ 1. Sauvegarde politiques actuelles:'

-- Lister politiques existantes avant suppression
\echo 'üìã Politiques RLS actuelles:'
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd
FROM pg_policies 
WHERE tablename LIKE 'facebook_%'
ORDER BY tablename, policyname;

-- Sauvegarder d√©tails complets
INSERT INTO migration_backup_info (table_name, column_name, old_definition, notes)
SELECT 
  'rls_policy',
  policyname,
  'ON ' || tablename || ' FOR ' || cmd || ' TO ' || COALESCE(roles::text, 'public') || 
  ' USING (' || COALESCE(qual, 'true') || ')' ||
  CASE WHEN with_check IS NOT NULL THEN ' WITH CHECK (' || with_check || ')' ELSE '' END,
  'Politique avant correction'
FROM pg_policies 
WHERE tablename LIKE 'facebook_%';

-- 3. SUPPRESSION POLITIQUES DANGEREUSES
\echo 'üóëÔ∏è  2. Suppression politiques actuelles (dangereuses):'

-- Supprimer toutes les politiques RLS actuelles sur tables Facebook
DO $$
DECLARE
  policy_record RECORD;
BEGIN
  FOR policy_record IN 
    SELECT tablename, policyname 
    FROM pg_policies 
    WHERE tablename LIKE 'facebook_%'
  LOOP
    EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(policy_record.policyname) || 
            ' ON ' || quote_ident(policy_record.tablename);
    RAISE NOTICE 'üóëÔ∏è  Supprim√©: % sur %', policy_record.policyname, policy_record.tablename;
  END LOOP;
END $$;

-- 4. V√âRIFICATION STRUCTURE COMPTES
\echo 'üîç 3. V√©rification structure comptes:'

-- V√©rifier que les tables de relation comptes existent
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'comptes') THEN
    RAISE EXCEPTION 'ERREUR: Table comptes non trouv√©e - requis pour RLS unifi√©e';
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'compte_users_clients') THEN
    RAISE EXCEPTION 'ERREUR: Table compte_users_clients non trouv√©e - requis pour RLS';
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'compte_users_pub_gms') THEN
    RAISE NOTICE 'ATTENTION: Table compte_users_pub_gms non trouv√©e - certains utilisateurs n''auront pas acc√®s';
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'compte_gestionnaires') THEN
    RAISE NOTICE 'ATTENTION: Table compte_gestionnaires non trouv√©e - certains utilisateurs n''auront pas acc√®s';
  END IF;
  
  RAISE NOTICE '‚úÖ Structure comptes valid√©e';
END $$;

-- 5. CR√âATION POLITIQUES RLS S√âCURIS√âES
\echo 'üîí 4. Cr√©ation politiques RLS s√©curis√©es (FACEBOOK.md):'

-- Politique pour facebook_ads_data (ARCHITECTURE UNIFI√âE)
\echo '  - facebook_ads_data...'
CREATE POLICY "facebook_ads_data_unified_policy" ON public.facebook_ads_data
  FOR ALL
  USING (
    compte_id IN (
      SELECT c.id FROM comptes c
      LEFT JOIN compte_users_clients cuc ON c.id = cuc.compte_id
      LEFT JOIN compte_users_pub_gms cup ON c.id = cup.compte_id  
      LEFT JOIN compte_gestionnaires cg ON c.id = cg.compte_id
      WHERE cuc.user_id::text = auth.jwt() ->> 'sub'
         OR cup.user_id::text = auth.jwt() ->> 'sub'
         OR cg.user_id::text = auth.jwt() ->> 'sub'
    )
  );

-- Politique pour facebook_sync_status (ARCHITECTURE UNIFI√âE)
\echo '  - facebook_sync_status...'
CREATE POLICY "facebook_sync_status_unified_policy" ON public.facebook_sync_status
  FOR ALL
  USING (
    compte_id IN (
      SELECT c.id FROM comptes c
      LEFT JOIN compte_users_clients cuc ON c.id = cuc.compte_id
      LEFT JOIN compte_users_pub_gms cup ON c.id = cup.compte_id  
      LEFT JOIN compte_gestionnaires cg ON c.id = cg.compte_id
      WHERE cuc.user_id::text = auth.jwt() ->> 'sub'
         OR cup.user_id::text = auth.jwt() ->> 'sub'
         OR cg.user_id::text = auth.jwt() ->> 'sub'
    )
  );

-- Politique pour facebook_import_logs (ARCHITECTURE UNIFI√âE)
\echo '  - facebook_import_logs...'
CREATE POLICY "facebook_import_logs_unified_policy" ON public.facebook_import_logs
  FOR ALL
  USING (
    compte_id IN (
      SELECT c.id FROM comptes c
      LEFT JOIN compte_users_clients cuc ON c.id = cuc.compte_id
      LEFT JOIN compte_users_pub_gms cup ON c.id = cup.compte_id  
      LEFT JOIN compte_gestionnaires cg ON c.id = cg.compte_id
      WHERE cuc.user_id::text = auth.jwt() ->> 'sub'
         OR cup.user_id::text = auth.jwt() ->> 'sub'
         OR cg.user_id::text = auth.jwt() ->> 'sub'
    )
  );

-- Politiques pour tables de logging si elles existent
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'facebook_api_logs') THEN
    EXECUTE '
      CREATE POLICY "facebook_api_logs_unified_policy" ON public.facebook_api_logs
        FOR ALL
        USING (
          compte_id IN (
            SELECT c.id FROM comptes c
            LEFT JOIN compte_users_clients cuc ON c.id = cuc.compte_id
            LEFT JOIN compte_users_pub_gms cup ON c.id = cup.compte_id  
            LEFT JOIN compte_gestionnaires cg ON c.id = cg.compte_id
            WHERE cuc.user_id::text = auth.jwt() ->> ''sub''
               OR cup.user_id::text = auth.jwt() ->> ''sub''
               OR cg.user_id::text = auth.jwt() ->> ''sub''
          )
        )';
    RAISE NOTICE '  - facebook_api_logs...';
  END IF;
  
  IF EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'facebook_logs_config') THEN
    EXECUTE '
      CREATE POLICY "facebook_logs_config_user_policy" ON public.facebook_logs_config
        FOR ALL
        USING (user_id = auth.jwt() ->> ''sub'')';
    RAISE NOTICE '  - facebook_logs_config...';
  END IF;
END $$;

-- 6. POLITIQUES SP√âCIALES POUR SUPERADMIN
\echo 'üîë 5. Politiques sp√©ciales pour Superadmin:'

-- Superadmin a acc√®s √† tout (bypass compte_id)
CREATE POLICY "facebook_ads_data_superadmin_policy" ON public.facebook_ads_data
  FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM users u 
      WHERE u.id::text = auth.jwt() ->> 'sub' 
      AND u.role IN ('Superadmin', 'Direction')
    )
  );

CREATE POLICY "facebook_sync_status_superadmin_policy" ON public.facebook_sync_status
  FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM users u 
      WHERE u.id::text = auth.jwt() ->> 'sub' 
      AND u.role IN ('Superadmin', 'Direction')
    )
  );

CREATE POLICY "facebook_import_logs_superadmin_policy" ON public.facebook_import_logs
  FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM users u 
      WHERE u.id::text = auth.jwt() ->> 'sub' 
      AND u.role IN ('Superadmin', 'Direction')
    )
  );

-- 7. V√âRIFICATION NOUVELLES POLITIQUES
\echo '‚úÖ 6. V√©rification nouvelles politiques:'

SELECT 
  tablename as "Table",
  policyname as "Politique",
  cmd as "Commande",
  CASE 
    WHEN policyname LIKE '%unified%' THEN 'üîí Unifi√©e'
    WHEN policyname LIKE '%superadmin%' THEN 'üîë Superadmin'
    ELSE '‚ùì Autre'
  END as "Type"
FROM pg_policies 
WHERE tablename LIKE 'facebook_%'
ORDER BY tablename, policyname;

-- Compter politiques cr√©√©es
SELECT 
  COUNT(*) as "Total nouvelles politiques",
  COUNT(*) FILTER (WHERE policyname LIKE '%unified%') as "Politiques unifi√©es",
  COUNT(*) FILTER (WHERE policyname LIKE '%superadmin%') as "Politiques superadmin"
FROM pg_policies 
WHERE tablename LIKE 'facebook_%';

-- 8. TEST LOGIQUE RLS (sans l'activer)
\echo 'üß™ 7. Test logique RLS:'

-- Test requ√™te politique unifi√©e (simulation)
DO $$
DECLARE
  test_user_id TEXT := '123e4567-e89b-12d3-a456-426614174000'; -- UUID test
  accessible_comptes INTEGER;
BEGIN
  -- Simuler combien de comptes seraient accessibles pour un utilisateur test
  -- (Ceci ne retournera rien car l'utilisateur test n'existe pas, mais teste la syntaxe)
  SELECT COUNT(*) INTO accessible_comptes
  FROM comptes c
  LEFT JOIN compte_users_clients cuc ON c.id = cuc.compte_id
  LEFT JOIN compte_users_pub_gms cup ON c.id = cup.compte_id  
  LEFT JOIN compte_gestionnaires cg ON c.id = cg.compte_id
  WHERE cuc.user_id::text = test_user_id
     OR cup.user_id::text = test_user_id
     OR cg.user_id::text = test_user_id;
     
  RAISE NOTICE 'üß™ Test logique RLS - syntaxe correcte';
  RAISE NOTICE '   Comptes accessibles pour utilisateur test: %', accessible_comptes;
END $$;

-- 9. ANALYSE S√âCURITAIRE
\echo 'üîç 8. Analyse s√©curitaire:'

DO $$
DECLARE
  total_policies INTEGER;
  unified_policies INTEGER;
  dangerous_policies INTEGER;
BEGIN
  SELECT COUNT(*) INTO total_policies
  FROM pg_policies WHERE tablename LIKE 'facebook_%';
  
  SELECT COUNT(*) INTO unified_policies  
  FROM pg_policies 
  WHERE tablename LIKE 'facebook_%' 
  AND policyname LIKE '%unified%';
  
  -- D√©tecter politiques potentiellement dangereuses (avec OR dans qual)
  SELECT COUNT(*) INTO dangerous_policies
  FROM pg_policies 
  WHERE tablename LIKE 'facebook_%' 
  AND (qual LIKE '%user_id = auth.uid() OR%' OR qual LIKE '%OR user_id = auth.uid()%');
  
  RAISE NOTICE '';
  RAISE NOTICE 'üìä ANALYSE S√âCURITAIRE:';
  RAISE NOTICE '  - Total politiques: %', total_policies;
  RAISE NOTICE '  - Politiques unifi√©es (s√©curis√©es): %', unified_policies;
  RAISE NOTICE '  - Politiques dangereuses d√©tect√©es: %', dangerous_policies;
  
  IF dangerous_policies > 0 THEN
    RAISE WARNING 'ATTENTION: Politiques dangereuses d√©tect√©es - v√©rifier manuellement';
  ELSE
    RAISE NOTICE '‚úÖ Aucune politique dangereuse d√©tect√©e';
  END IF;
  
  IF unified_policies >= 3 THEN
    RAISE NOTICE '‚úÖ Architecture unifi√©e correctement impl√©ment√©e';
  ELSE
    RAISE WARNING 'ATTENTION: Architecture unifi√©e incompl√®te';
  END IF;
END $$;

-- 10. VALIDATION FINALE
\echo 'üéØ 9. Validation finale:'

-- V√©rifier que toutes les tables principales ont des politiques
WITH tables_facebook AS (
  SELECT tablename FROM pg_tables 
  WHERE tablename IN ('facebook_ads_data', 'facebook_sync_status', 'facebook_import_logs')
),
tables_with_policies AS (
  SELECT DISTINCT tablename FROM pg_policies 
  WHERE tablename LIKE 'facebook_%'
)
SELECT 
  tf.tablename,
  CASE WHEN twp.tablename IS NOT NULL THEN '‚úÖ Prot√©g√©e' ELSE '‚ùå Non prot√©g√©e' END as "Statut RLS"
FROM tables_facebook tf
LEFT JOIN tables_with_policies twp ON tf.tablename = twp.tablename
ORDER BY tf.tablename;

-- 11. FINALISATION
UPDATE migration_log 
SET 
  status = 'completed',
  end_time = NOW(),
  duration_seconds = EXTRACT(EPOCH FROM (NOW() - start_time)),
  notes = 'Politiques RLS s√©curis√©es cr√©√©es selon architecture unifi√©e'
WHERE phase = 'phase2_urgent' 
  AND script_name = '06-fix-rls-policies.sql' 
  AND status = 'started';

\echo '‚úÖ POLITIQUES RLS CORRIG√âES'
\echo ''
\echo 'üîí ARCHITECTURE UNIFI√âE IMPL√âMENT√âE:'
\echo '  ‚úÖ Failles s√©curitaires corrig√©es'
\echo '  ‚úÖ Logique "OU" dangereuse supprim√©e'  
\echo '  ‚úÖ Acc√®s bas√© uniquement sur compte_id'
\echo '  ‚úÖ Politiques Superadmin configur√©es'
\echo ''
\echo 'üìã PROCHAINE √âTAPE CRITIQUE:'
\echo '  ‚û°Ô∏è  Ex√©cuter IMM√âDIATEMENT 07-enable-rls-secure.sql'
\echo '  ‚ö†Ô∏è  NE PAS arr√™ter maintenant - RLS encore d√©sactiv√©'
\echo ''
\echo '‚è∞ Temps restant RLS d√©sactiv√©: < 1 heure'